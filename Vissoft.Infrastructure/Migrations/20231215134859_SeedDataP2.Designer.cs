// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vissoft.Infrastructure.Data;

#nullable disable

namespace Vissoft.Infrastructure.Migrations
{
    [DbContext(typeof(VissoftDatabaseContext))]
    [Migration("20231215134859_SeedDataP2")]
    partial class SeedDataP2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<int?>("CurriculumId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("ImgLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ffb74a",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6830),
                            GradeId = 1,
                            ImgLink = "Images/Course/course-1.png",
                            Info = "Khóa lớp 1 bao gồm các bài tập tự luyện kèm lời giải hay cho môn Toán lớp 1 với nhiều dạng bài khác nhau như tính, điền dấu, so sánh số, giải toán có lời văn, toán đố",
                            Name = "Khai giảng khóa lớp 1",
                            Status = true,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = "#00bc51",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6833),
                            GradeId = 2,
                            ImgLink = "Images/Course/course-2.png",
                            Info = "Khóa lớp 2 bao gồm các bài tập tự luyện kèm lời giải hay cho môn Toán lớp 2 với nhiều dạng bài khác nhau như tính, điền dấu, so sánh số, giải toán có lời văn, toán đố",
                            Name = "Khai giảng khóa lớp 2",
                            Status = true,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = "#ff9679",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6835),
                            GradeId = 3,
                            ImgLink = "Images/Course/course-1.png",
                            Info = "Khóa lớp 3 bao gồm các bài tập tự luyện kèm lời giải hay cho môn Toán lớp 1 với nhiều dạng bài khác nhau như tính, điền dấu, so sánh số, giải toán có lời văn, toán đố",
                            Name = "Khai giảng khóa lớp 3",
                            Status = true,
                            SubjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Color = "#1dc2da",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6837),
                            GradeId = 4,
                            ImgLink = "Images/Course/course-2.png",
                            Info = "Khóa lớp 4 bao gồm các bài tập tự luyện kèm lời giải hay cho môn Toán lớp 1 với nhiều dạng bài khác nhau như tính, điền dấu, so sánh số, giải toán có lời văn, toán đố",
                            Name = "Khai giảng khóa lớp 4",
                            Status = true,
                            SubjectId = 1
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("curriculum", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6709),
                            Name = "Kết nối tri thức với cuộc sống",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6711),
                            Name = "Cánh diều",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6713),
                            Name = "Chân trường sáng tạo",
                            Status = true
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("exercise", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonId = 1,
                            Name = "Nhận biết các số từ 0 đến 5"
                        },
                        new
                        {
                            Id = 2,
                            LessonId = 1,
                            Name = "Cách viết các số từ 0 đến 5"
                        },
                        new
                        {
                            Id = 3,
                            LessonId = 1,
                            Name = "Đếm đến 5 (Phần 1)"
                        },
                        new
                        {
                            Id = 4,
                            LessonId = 1,
                            Name = "Đếm đến 5 (Phần 2)"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.FillBlank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("fillBlank", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("grade", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lớp 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lớp 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lớp 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lớp 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lớp 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lớp 6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lớp 7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Lớp 8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Lớp 9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Lớp 10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Lớp 11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Lớp 12"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Introduce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("introduce", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Tại lớp học, các thầy cô luôn có những phương pháp giảng dạy để truyền ngọn lửa đam mê môn học cho các con, giúp khơi gợi niềm say mê học tập.",
                            Status = true,
                            Title = "Toán học SkyMath"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("ThematicId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThematicId");

                    b.ToTable("lesson", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6877),
                            Description = "",
                            Name = "Các số 0,1,2,3,4,5",
                            Status = true,
                            ThematicId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6879),
                            Description = "",
                            Name = "Các số 6,7,8,9,10",
                            Status = true,
                            ThematicId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6881),
                            Description = "",
                            Name = "Nhiều hơn, ít hơn, bằng nhau",
                            Status = true,
                            ThematicId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6882),
                            Description = "",
                            Name = "So sánh số",
                            Status = true,
                            ThematicId = 1
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Matching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ASide")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BSide")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("matching", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.MultipleChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OptionA")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionB")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionC")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionD")
                        .HasColumnType("longtext");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("multipleChoice", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.NewsAndEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("newsAndEvent", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6760),
                            ImageLink = "Images/NewAndEvent/news-1.png",
                            Overview = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            Status = true,
                            Title = "Mở vòng thi số 02 Violympic môn Toán bằng Tiếng Anh"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6762),
                            ImageLink = "Images/NewAndEvent/news-2.png",
                            Overview = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            Status = true,
                            Title = "Mở vòng thi số 02 Violympic môn Toán bằng Tiếng Anh"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6763),
                            ImageLink = "Images/NewAndEvent/news-3.png",
                            Overview = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            Status = true,
                            Title = "Mở vòng thi số 02 Violympic môn Toán bằng Tiếng Anh"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6764),
                            ImageLink = "Images/NewAndEvent/news-4.png",
                            Overview = "Mọi thông tin về vòng thi sắp tới đây đều được cập nhật và thông báo tại đây",
                            Status = true,
                            Title = "Mở vòng thi số 02 Violympic môn Toán bằng Tiếng Anh"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<float?>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuizTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("QuizTypeId");

                    b.ToTable("quiz", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.CourseTeacher", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("courseTeacher", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.NewsAndEventAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NewsAndEventId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NewsAndEventId");

                    b.ToTable("newsAndEventAttribute", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.QuizType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("quizType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fill in blank"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Matching"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Multiple choice"
                        },
                        new
                        {
                            Id = 4,
                            Name = "True false"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("resourceType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Text"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Video"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("resource", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonId = 1,
                            Link = "https://youtu.be/THQBntZoHaI",
                            Name = "Các số 0,1,2,3,4,5",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            LessonId = 2,
                            Link = "https://youtu.be/zzAdZZ-kgyk",
                            Name = "Các số 6,7,8,9,10",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            LessonId = 3,
                            Link = "https://youtu.be/eFt1jHGAFYE",
                            Name = "Nhiều hơn, ít hơn, bằng nhau",
                            ResourceTypeId = 3
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("slide", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageLink = "Images/Slide/heroes-1.png",
                            Slogan = "Cùng SkyMath bứt phá Điểm 10 không khó",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageLink = "Images/Slide/heroes-2.png",
                            Slogan = "Cùng SkyMath bứt phá Điểm 10 không khó",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            ImageLink = "Images/Slide/heroes-3.png",
                            Slogan = "Cùng SkyMath bứt phá Điểm 10 không khó",
                            Status = true
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("subject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6673),
                            Name = "Toán",
                            Status = true
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WorkPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "Images/Teacher/teacher-1.png",
                            Description = "Với kinh nghiệm nhiều năm trong nghề, thầy đã không chỉ giup các em học sinh trở nên yêu thích môn Toán, mà còn đạt giải cao trong các cuộc thi lớn...",
                            Name = "Thầy Nguyễn Duy Minh",
                            WorkPlace = "Trường Tiểu học Lê Văn Tám"
                        },
                        new
                        {
                            Id = 2,
                            Avatar = "Images/Teacher/teacher-2.png",
                            Description = "Với kinh nghiệm nhiều năm trong nghề, thầy đã không chỉ giup các em học sinh trở nên yêu thích môn Toán, mà còn đạt giải cao trong các cuộc thi lớn...",
                            Name = "Cô Hoàng Thị Cẩm Tú",
                            WorkPlace = "Trường Tiểu học Lê Văn Tám"
                        },
                        new
                        {
                            Id = 3,
                            Avatar = "Images/Teacher/teacher-3.png",
                            Description = "Với kinh nghiệm nhiều năm trong nghề, thầy đã không chỉ giup các em học sinh trở nên yêu thích môn Toán, mà còn đạt giải cao trong các cuộc thi lớn...",
                            Name = "Cô Lương Thùy Linh",
                            WorkPlace = "Trường Tiểu học Lê Văn Tám"
                        },
                        new
                        {
                            Id = 4,
                            Avatar = "Images/Teacher/teacher-4.png",
                            Description = "Với kinh nghiệm nhiều năm trong nghề, thầy đã không chỉ giup các em học sinh trở nên yêu thích môn Toán, mà còn đạt giải cao trong các cuộc thi lớn...",
                            Name = "Cô Trần Mai Phương",
                            WorkPlace = "Trường Tiểu học Lê Văn Tám"
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Thematic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("thematic", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6852),
                            Name = "Chủ đề 1: Các số từ 0 đến 10",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6854),
                            Name = "Chủ đề 2: Làm quen với một số hình phẳng",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6855),
                            Name = "Chủ đề 3: Phép cộng, phép trừ trong phạm vi 10",
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            CreatedDate = new DateTime(2023, 12, 15, 20, 48, 58, 951, DateTimeKind.Local).AddTicks(6856),
                            Name = "Chủ đề 4: Làm quen với một số hình khối",
                            Status = true
                        });
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.TrueFalse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Answer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("trueFalse", (string)null);
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Course", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Curriculum", "Curriculum")
                        .WithMany("Courses")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Grade", "Grade")
                        .WithMany("Courses")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Exercise", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.FillBlank", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Quiz", "Quiz")
                        .WithMany("FillBlanks")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Lesson", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Thematic", "Thematic")
                        .WithMany("Lessons")
                        .HasForeignKey("ThematicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thematic");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Matching", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Quiz", "Quiz")
                        .WithMany("Matchings")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.MultipleChoice", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Quiz", "Quiz")
                        .WithMany("MultipleChoices")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Quiz", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Exercise", "Exercise")
                        .WithMany("Quizzes")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.QuizType", "QuizType")
                        .WithMany("Quizzes")
                        .HasForeignKey("QuizTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("QuizType");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.CourseTeacher", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Teacher", "Teachers")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.NewsAndEventAttribute", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.NewsAndEvent", "NewsAndEvent")
                        .WithMany("NewsAndEventAttributes")
                        .HasForeignKey("NewsAndEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsAndEvent");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Resource", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Lesson", "Lesson")
                        .WithMany("Resources")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Thematic", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Course", "Course")
                        .WithMany("Thematics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.TrueFalse", b =>
                {
                    b.HasOne("Vissoft.Core.Entities.SkyMathEntities.Quiz", "Quiz")
                        .WithMany("TrueFalses")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Course", b =>
                {
                    b.Navigation("CourseTeachers");

                    b.Navigation("Thematics");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Curriculum", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Exercise", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Grade", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Lesson", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.NewsAndEvent", b =>
                {
                    b.Navigation("NewsAndEventAttributes");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Quiz", b =>
                {
                    b.Navigation("FillBlanks");

                    b.Navigation("Matchings");

                    b.Navigation("MultipleChoices");

                    b.Navigation("TrueFalses");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.QuizType", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.RelationalEntities.ResourceType", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Subject", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Teacher", b =>
                {
                    b.Navigation("CourseTeachers");
                });

            modelBuilder.Entity("Vissoft.Core.Entities.SkyMathEntities.Thematic", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
